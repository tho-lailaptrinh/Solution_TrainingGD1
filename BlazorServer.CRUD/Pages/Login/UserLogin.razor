@page "/userlogin"
@using BlazorServer.CRUD.Authentications
@using BlazorServer.CRUD.Services
@using PhongKhamNhaKhoa.Model
@using PhongKhamNhaKhoa.Model.Users

@inject UserService usersevice
@inject IJSRuntime js;
@inject AuthenticationStateProvider authenticationState;
@inject NavigationManager NavigationManager;

<EditForm Model="LoginModel" OnSubmit="HandleLogin">
      <div class="row ">
        <div class="col-6 d-flex justify-content-center">
                     <div class="card card-body ">
                    <h4 class="text-center text">Login</h4>
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="col">
                        <label class="" for="username">UserName</label>
                        <InputText id="username" class="form-control" @bind-Value="LoginModel.UserName"></InputText>
                        <ValidationMessage For="()=>LoginModel.UserName"></ValidationMessage>
                    </div>
                    <div class="col">
                        <label class="" for="password">Password</label>
                        <InputText id="password" class="form-control" @bind-Value="LoginModel.Password"></InputText>
                        <ValidationMessage For="()=> LoginModel.Password"></ValidationMessage>
                    </div>
                    <div class="col">
                        <button type="submit" class="m-2 btn btn-outline-success">Submit</button>
                    </div>
                </div>
            </div>
     </div>
        
</EditForm>

@code {
    private LoginRequest LoginModel = new LoginRequest();
    public async Task HandleLogin()
    {
        var userAccount = usersevice.GetByIdUser(LoginModel.UserName);
        if(userAccount == null || userAccount.Password != LoginModel.Password)
        {
            await js.InvokeVoidAsync("alert", "Tài khoản và mật khẩu không chính xác", "Thông báo");
            return;
        }
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationState;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });
        NavigationManager.NavigateTo("/", true);
    }
}
